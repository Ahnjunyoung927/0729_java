package com.kh.first; // 패키지 선언부 : 현재 클래스의 위치

	/*
	 *주석(Comments)
	 *주석은 파일을 실행 하는데에 있어서 아무런 영향을 끼치지 않음
	 *코드를 작성한 후 작성한 코드를 이해하기 쉽도록 하기 위함
	 *주석을 달아놓으면 유지보스 시간을 줄일 수 있음
	 *주석의 종류(3가지)
	 *1.한 줄 주석 (//) : 주석 내용이 한 줄 일때
	 *  "//"이후부터 행의 끝까지 모든 내용을 주석으로 간주
	   
	 *2.여러 줄 주석
	 *  여러 줄에 걸쳐 주석처리 할 때 사용
	 */

	 /*
	 *패키지(package)
	 *
	 *하나의 패키지안에 여러 개의 클래들이 존재할 수 있음
	 *단, 하나의 패키지 안에 동일한 이름의 클래스는 존재할 수 없음
	 *
	 *프로그램을 만들 때 모든 클래스들을 동일한 패키지에 생성하여 관리하면 복잡하기 때문에
	 *클래스들을 용도에 맞게 구분해서 패키지에 보관하는 것을 권장한다.
	 *
	 *패키지는 적어도 세 단계 이상으로 만들어주는 것을 권장함
	 *ex ) com.kh.first
	 *com.(회사이름).(프로젝트이름/팀이름/카테고리이름)
	 *
	 */
public class FirstClass { //클래스 이름을 FisrtClass라고 지었음 { Scope }
	
	// Scope(블록) { }은 중괄호로 묶은 부분을 이야기하며, 복합문을 구성하는 요소이다
	// 즉, 종속된 문장이 다수 개일 때 '{' 로 시작하고 '}'로 닫습니다.
	
	// main method : 프로그램의 시작점, 프로그램 당 1개는 가지고 있어야 함.
	public static void main(String[] args) {
		
		// * Method : 하나의 기능 단위 ()를 열고 닫는 것으로 끝난다.
		// 하나의 클래스 안에 여러 개의 메소드가 존재할 수 있음
		// 메소드 안의 구문을 수행하고 싶다면 반드시 "호출"해야 한다.
		
		// 공백문자는 빈 칸, 탭 문자, 빈 줄 등이 있으며
		// 이러한 공백문자들은 소스코드를 보기 좋게 하고
		// 알아보기 쉽게 만드는데 사용된다.
		// 즉, 프로그램을 구조화된 형태로 표현하는데 유용하다.
		
		// . 참조 연산자, 직접 접근 연산자
		
		printMyName();
		
		System.out.println("Hello World!"); // 출력문 
		// 논리적인 한 문장이 끝날 때 반드시 세미콜론을 붙임.
		
		printMyName();
		
	}
	
	public static void printMyName() {
		
		// 안녕하세요. 제 이름은 XXX입니다. 반갑습니다.
		System.out.println("안녕하세요. 제 이름은 안준영입니다. 반갑습니다.");
		
	}
	
}
